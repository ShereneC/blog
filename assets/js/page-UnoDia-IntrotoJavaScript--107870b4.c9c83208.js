(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{484:function(t,e,a){"use strict";a.r(e);var i=a(2),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"uno-dia-intro-to-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uno-dia-intro-to-javascript"}},[t._v("#")]),t._v(" Uno Dia - Intro to JavaScript")]),t._v(" "),a("p",[t._v("Today's Reflection: Enjoyed learning about the functionality of javascript and how it can add interactivity to a website.")]),t._v(" "),a("h2",{attrs:{id:"what-is-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-scope"}},[t._v("#")]),t._v(" What is Scope ?")]),t._v(" "),a("h3",{attrs:{id:"scope-is-the-area-of-code-that-objects-or-variables-exist-in-they-might-be-global-or-inside-a-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope-is-the-area-of-code-that-objects-or-variables-exist-in-they-might-be-global-or-inside-a-function"}},[t._v("#")]),t._v(" Scope is the area of code that objects or variables exist in.  They might be global or inside a function.")]),t._v(" "),a("h2",{attrs:{id:"what-is-hoisting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-hoisting"}},[t._v("#")]),t._v(" What is Hoisting ?")]),t._v(" "),a("h3",{attrs:{id:"hoisting-is-putting-a-variable-up-at-the-top-of-its-scope-it-is-undefined-then-will-be-defined-some-time-during-the-function-or-scope-hoisting-it-makes-it-so-that-it-can-be-changed-but-can-also-give-unintended-consequences"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hoisting-is-putting-a-variable-up-at-the-top-of-its-scope-it-is-undefined-then-will-be-defined-some-time-during-the-function-or-scope-hoisting-it-makes-it-so-that-it-can-be-changed-but-can-also-give-unintended-consequences"}},[t._v("#")]),t._v(" Hoisting is putting a variable up at the top of its scope - it is undefined, then will be defined some time during the function or scope.  Hoisting it makes it so that it can be changed, but can also give unintended consequences.")]),t._v(" "),a("h2",{attrs:{id:"in-what-cases-might-you-use-let-vs-const-vs-var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-what-cases-might-you-use-let-vs-const-vs-var"}},[t._v("#")]),t._v(" In what cases might you use let vs const vs var?")]),t._v(" "),a("h3",{attrs:{id:"i-am-confused-between-let-var-it-seems-like-let-is-only-used-within-the-scope-of-a-function-and-var-is-a-more-global-variable-const-is-a-variable-that-does-not-change-for-example-pi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-am-confused-between-let-var-it-seems-like-let-is-only-used-within-the-scope-of-a-function-and-var-is-a-more-global-variable-const-is-a-variable-that-does-not-change-for-example-pi"}},[t._v("#")]),t._v(" I am confused between let & var.  It seems like let is only used within the scope of a function and var is a more global variable?  const is a variable that does not change - for example pi.")]),t._v(" "),a("p",[t._v("Afternoon Code: https://sherenec.github.io/JavaScript-Day1/")])])}),[],!1,null,null,null);e.default=s.exports}}]);